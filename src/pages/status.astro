---
let session_status = false;
let session_status2 = false;
let session_cookie = JSON.stringify({result: 'nocookie'});
let session_cookie2 = JSON.stringify({result: 'nocookie'});
let expireIn = 0;

import jwt from 'jsonwebtoken'

if (Astro.cookies.has("__sessiondemo")) {
	session_status = true;
	session_cookie = Astro.cookies.get("__sessiondemo")?.value;
	expireIn = JSON.parse(session_cookie.slice(2)).expiration - Date.now();
}

if (Astro.cookies.has("__session")) {
	session_status2 = true;
	session_cookie2 = jwt.decode(Astro.cookies.get("__session")?.value)
	//expireIn = JSON.parse(session_cookie.slice(2)).expiration - Date.now();
}
const { title } = Astro.props;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Status Page</title>
		
		<style>
			.ok {
				background-color: #0f0;
			}
			.warn {
				background-color: #ff0;
			}
			.error {
				background-color: #f00;
			}

			.statusdisplay {
				
				text-align: center;
				padding: 0 5px;
				text-transform: uppercase;
			}
		</style>
	</head>
	<body>

		<h1 class="bg-green-300 text-center text-4xl font-bold p-10 mx-40">STATUS TABLE</h1>
		<div class="bg-red-300 flex mx-40 ">
			<span class="m-1 mx-4 italic font-bold text-2xl">Dynecore Development Service</span>
			<a href="/" class="m-1 mx-4 text-blue-700 underline content-end">Go Home</a>
		</div>
<div class=" grid grid-cols-5 text-center uppercase mx-40 bg-red-200">
	<div class="border-t-2 border-l-2 border-black">api</div>
	<div class="border-t-2 border-l-2 border-black">status</div>
	<div class="border-t-2 border-x-2 border-black col-span-3">content</div>
	
	<div class="border-t-2 border-l-2 border-black">master</div>
	<div class="statusdisplay border-t-2 border-l-2 border-black" id="masterStatus">unknown</div>
	<div class="statusdisplay border-t-2 border-x-2 col-span-3 border-black bg-black text-white font-mono text-sm" id="masterContent"></div>

	<div class="border-t-2 border-l-2 border-black">session cookie</div>
	{
					
		() => {
			if (session_status2) {
				
				return <><div class="statusdisplay ok border-t-2 border-l-2 border-black" id="sessionStatus2">LOGGED IN</div></>
				
			}else{
				return <><div class="statusdisplay warn border-t-2 border-l-2 border-black" id="sessionStatus2">LOGGED OUT</div></>
				
			}
		}
	}

	<div class="border-t-2 border-x-2 border-black col-span-3">
		<iframe id="jsonIframe2" class="w-full"></iframe>
	</div>

	<div class="border-y-2 border-l-2 border-black">session demo</div>
	{
					
		() => {
			if (session_status) {
				
				return <><div class="statusdisplay ok border-y-2 border-l-2 border-black" id="sessionStatus">LOGGED IN</div></>
				
			}else{
				return <><div class="statusdisplay warn border-y-2 border-l-2 border-black" id="sessionStatus">LOGGED OUT</div></>
				
			}
		}
	}

	<div class="border-2 border-black col-span-3">
		<iframe id="jsonIframe" class="w-full"></iframe>
	</div>
</div>



		
	</body>

	<script define:vars={{session_cookie, session_status}}>
		let jsonblob;

        // Crear un Blob con el tipo de contenido JSON
		if(session_status){
			jsonBlob = new Blob([JSON.stringify(JSON.parse(session_cookie.slice(2)), null, 2)], { type: "application/json" });
		}else{
		   jsonBlob = new Blob([JSON.stringify(session_cookie)], { type: "application/json" });
		}
		
        // Crear una URL para el Blob
        const jsonURL = URL.createObjectURL(jsonBlob);

        // Asignar la URL al iframe
        const iframe = document.getElementById("jsonIframe")
		
        iframe.src = jsonURL;
    </script>

<script define:vars={{session_cookie2, session_status2}}>

	const jsonBlob2 = new Blob([JSON.stringify(session_cookie2)], { type: "application/json" });
		
console.log(jsonBlob2)
	// Asignar la URL al iframe
	const iframe2 = document.getElementById("jsonIframe2").src = URL.createObjectURL(jsonBlob2)
	
</script>
	
	<script>

		
		const setStatus = (element, status) => {
			// Limpiar las clases de estado anteriores
			element.classList.remove("ok", "warn", "error");

			// Añadir la clase correspondiente según el estado
			element.classList.add(status);

			// Modificar el texto del elemento según el estado
			if (status === "ok") {
				element.textContent = "ok";
			} else if (status === "warn") {
				element.textContent = "down";
			} else if (status === "error") {
				element.textContent = "error";
			}
		};

		document.addEventListener("DOMContentLoaded", async () => {
			const masterStatus = document.getElementById("masterStatus");
			const masterContent = document.getElementById("masterContent");
			
			try {
				// Realiza un fetch para consultar el estado de la API
				let response;
				try {
					response = await fetch("/api/status", {
						method: "HEAD",
						mode: "no-cors",
					});
				} catch {}

				if (response) {
					if (response.ok) {
						response = await fetch("/api/status", {
							method: "GET",
						});
						const data = await response.json();

						setStatus(masterStatus, "ok"); // Configura el estado como "ok"
						masterContent.textContent = JSON.stringify(data);
					} else {
						console.log("Posible error de CORS");
						setStatus(masterStatus, "error");
						masterContent.textContent = "Posible error de CORS";
					}
				} else {
					console.log("Servicio de backend caído");
					setStatus(masterStatus, "warn");
					masterContent.textContent = "Servicio de backend caído";
				}
			} catch (error) {
				console.log(error);
			}
		});
	</script>
</html>
